///https://cses.fi/problemset/task/1672/

#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef pair<ll, ll> pll;
typedef vector<pll> vll;

#define endl '\n'
#define PB push_back
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define rall(a) (a).rbegin(),(a).rend()
#define sz(x) (int)x.size()
#define nl cout<<endl

const ll infLL = 9000000000000000000;

#define bismillah ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

ll gcd(ll a, ll b) { return __gcd(a, b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }

int main() {
    bismillah;
    ll n, m, q;
    cin >> n >> m >> q;
    vector<vl> dist(n + 1, vl(n + 1, infLL));

    // Read edges and initialize distances
    for (int i = 0; i < m; i++) {
        ll u, v, w;
        cin >> u >> v >> w;
        dist[u][v] = min(dist[u][v], w);
        dist[v][u] = min(dist[v][u], w);
    }

    // Set distance to self as 0
    for (ll i = 1; i <= n; i++) {
        dist[i][i] = 0;
    }

    // Floyd-Warshall algorithm to compute all-pairs shortest paths
    for (ll k = 1; k <= n; k++) {
        for (ll i = 1; i <= n; i++) {
            for (ll j = 1; j <= n; j++) {
                if (dist[i][k] != infLL && dist[k][j] != infLL) {
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                }
            }
        }
    }

    // Answer queries
    while (q--) {
        ll x, y;
        cin >> x >> y;
        if (dist[x][y] == infLL) {
            cout << -1 << endl;
        } else {
            cout << dist[x][y] << endl;
        }
    }

    return 0;
}
